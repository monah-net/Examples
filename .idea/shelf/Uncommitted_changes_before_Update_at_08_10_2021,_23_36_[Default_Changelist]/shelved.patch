Index: src/main/java/FATCA/XMLComparatorNEW.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package FATCA;\n\nimport com.sun.xml.internal.ws.api.model.wsdl.WSDLOutput;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nclass XML_comparatorNEW {\n    public static void main(String[] args) throws ParserConfigurationException, IOException, SAXException {\n        final int input = 0;\n        final int output = 1;\n        String[] files = new String[2];\n        HashMap<String, String> mapa = new HashMap<>();\n        mapa.put(\"FIReturn\", \"FIReturnRef\");\n        mapa.put(\"AccountData\", \"AccountRef\");\n        mapa.put(\"PoolReport\", \"PoolReportRef\");\n        ArrayList resElementsIn = new ArrayList();\n        ArrayList resElementsOut = new ArrayList();\n        files[input] = \"/Users/olegsolodovnikov/MyDocuments/FATCA/Comparator/xml_files/origin_GB_crs_Lineriased.xml\";\n        files[output] = \"/Users/olegsolodovnikov/MyDocuments/FATCA/Comparator/xml_files/origin_GB_crsUPD_oneLine.xml\";\n        DocumentBuilder dBuilderInput = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n        List[] resElements = new List[]{new ArrayList(), new ArrayList()};\n//        get all elements from file into resElementsIn array\n        for (int fileCounter = 0; fileCounter < 2; fileCounter++) {\n            File fileInput = new File(files[fileCounter]);\n            Document javaParsedInput = dBuilderInput.parse(fileInput);\n            NodeList allElementsIn = javaParsedInput.getElementsByTagName(\"*\");\n            for (int i = 0; i < allElementsIn.getLength(); i++) {\n                Node current = allElementsIn.item(i);\n                Node currChild = current.getFirstChild();\n                if (currChild.getNodeType() == Node.TEXT_NODE) {\n                    StringBuilder attribute = new StringBuilder();\n                    if (current.hasAttributes()) {\n                        NamedNodeMap currAttrs = current.getAttributes();\n                        List currAttrTempList = new ArrayList<>();\n                        for (int j = 0; j < currAttrs.getLength(); j++) {\n                            currAttrTempList.add(\"/\" + currAttrs.item(j).getNodeName() + \"=\" + currAttrs.item(j).getNodeValue());\n                        }\n                        Collections.sort(currAttrTempList);\n                        for (int k = 0; k < currAttrTempList.size(); k++) {\n                            attribute.append(currAttrTempList.get(k));\n                        }\n                    }\n                    String currElemName = current.getNodeName() + attribute + \":\" + current.getTextContent();\n                    while (!current.getParentNode().getNodeName().equals(\"#document\")) {\n                        current = current.getParentNode();\n//                  Get Reference value into the parsed string\n                        String reference = \"\";\n                        if (mapa.containsKey(current.getNodeName()) && current.getFirstChild().getFirstChild().getNodeName().equals(mapa.get(current.getNodeName()))) {\n                            reference = current.getFirstChild().getFirstChild().getTextContent();\n                            System.out.println(\"reference : \" + current.getFirstChild().getFirstChild().getNodeName() + reference);\n                        }\n                        StringBuilder attributeParent = new StringBuilder();\n                        if (current.hasAttributes() && !current.getParentNode().getNodeName().equals(\"#document\")) {\n                            NamedNodeMap currAttrs = current.getAttributes();\n                            List attrTempList = new ArrayList<>();\n                            for (int j = 0; j < currAttrs.getLength(); j++) {\n                                attrTempList.add(\"/\" + currAttrs.item(j).getNodeName() + \"=\" + currAttrs.item(j).getNodeValue());\n                            }\n                            Collections.sort(attrTempList);\n                            for (int j = 0; j < attrTempList.size(); j++) {\n                                attributeParent.append(attrTempList.get(j));\n                            }\n                        }\n                        if (reference.equals(\"\")) {\n                            currElemName = current.getNodeName() + attributeParent + \".\" + currElemName;\n                        } else {\n                            currElemName = current.getNodeName() + \":\" + reference + attributeParent + \".\" + currElemName;\n                        }\n                    }\n                    resElements[fileCounter].add(currElemName);\n                }\n            }\n        }\n\n//        Compairing arrays\n\n        List resElementsInTemp = new ArrayList();\n        List resElementsOutTemp = new ArrayList();\n        Set<String> dublicates = new HashSet<String>(resElements[output]);\n        System.out.println(dublicates.size());\n        System.out.println(resElements[output].size());\n        System.out.println(resElements[output]);\n        System.out.println(dublicates);\n        resElementsInTemp.addAll(resElements[input]);\n        resElementsOutTemp.addAll(resElements[output]);\n//        System.out.println(resElementsInTemp);\n//        System.out.println(resElementsOutTemp);\n//        resElements[output].removeAll(resElementsInTemp);\n//        System.out.println(resElements[input]);\n//        System.out.println(resElements[output]);\n        System.out.println(resElements[input]);\n        System.out.println(resElements[input].isEmpty());\n        System.out.println(resElements[input].size());\n//        System.out.println( resElements[output].isEmpty());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/FATCA/XMLComparatorNEW.java b/src/main/java/FATCA/XMLComparatorNEW.java
--- a/src/main/java/FATCA/XMLComparatorNEW.java	(revision 8d515000be49ceae4d3a0190ac8e8284b472ad52)
+++ b/src/main/java/FATCA/XMLComparatorNEW.java	(date 1633553014082)
@@ -88,7 +88,7 @@
         List resElementsInTemp = new ArrayList();
         List resElementsOutTemp = new ArrayList();
         Set<String> dublicates = new HashSet<String>(resElements[output]);
-        System.out.println(dublicates.size());
+        System.out.println("Dublicates\\" + dublicates.size());
         System.out.println(resElements[output].size());
         System.out.println(resElements[output]);
         System.out.println(dublicates);
@@ -96,12 +96,14 @@
         resElementsOutTemp.addAll(resElements[output]);
 //        System.out.println(resElementsInTemp);
 //        System.out.println(resElementsOutTemp);
-//        resElements[output].removeAll(resElementsInTemp);
+        resElements[output].removeAll(resElementsInTemp);
 //        System.out.println(resElements[input]);
 //        System.out.println(resElements[output]);
         System.out.println(resElements[input]);
         System.out.println(resElements[input].isEmpty());
         System.out.println(resElements[input].size());
-//        System.out.println( resElements[output].isEmpty());
+        System.out.println( resElements[output].isEmpty());
+        System.out.println(resElements[output].size());
+        System.out.println(resElements[output]);
     }
 }
\ No newline at end of file
